
      model
      {
      for (g in 1:n.sess) #for each grid
      {
      #### priors for each grid
      psim[g]~dunif(0,1)
      
      #### model for marked individuals
      
      for (i in 1:mmax) #individual i
      {
      for(j in 1:J) #location j
      {
      D2[g,i,j] <- (S[g,i,1]-X[j,1])^2 + (S[g,i,2]-X[j,2])^2 #pythagorian theorem, distance to activity center
      lam[g,i,j] <- lam0*exp(-D2[g,i,j]/(2*sigma^2)) #lambda accounting for distance from activity center
      y[g,i,j]~dpois(lam.effm[g,i,j]*K[g,j])  #model accumulated counts across K for marked individuals and add for whether a camera is functioning or not
      lam.effm[g,i,j] <- lam[g,i,j]*zm[g,i] #lambda accounting for existence of individual
      }
      zm[g,i] ~ dbern(psim[g]) 
      S[g,i,1] ~ dunif(xlims[1], xlims[2]) #activity center x coord
      S[g,i,2] ~ dunif(ylims[1], ylims[2]) #activity center y coord

      }
      }
      for (g in 1:n.sess)
      {
      N[g] <- sum(zm[g,1:mmax])
      D[g] <- N[g]/S.Area
      }
    
      #### priors across grids
      lam0~dunif(0,5)
      sigma~dunif(0,100) #smoothing parameter; might need to adjust these based on what output looks like, I'm setting at approx 3*mmdm

      } #end model description
      
      
